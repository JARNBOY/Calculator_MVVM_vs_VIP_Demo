//
//  CalculatorPresenter.swift
//  MVVM_VS_VIP
//
//  Created by Papon Supamongkonchai on 7/4/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CalculatorPresentationLogic
{
    func presentClickNumber(textCalculator: String)
    func presentClickOperations(textOperation: String)
    func presentCalNumberForPlus(response: CalculatorModel.Plus.Response)
    func presentCalNumberForMinus(response: CalculatorModel.Minus.Response)
    func presentCalNumberForMultiply(response: CalculatorModel.Multiply.Response)
    func presentCalNumberForDivide(response: CalculatorModel.Divide.Response)
    func presentResultNumberEqual(response: CalculatorModel.Equal.Response)
    func presentClearNumber()
}

class CalculatorPresenter: CalculatorPresentationLogic
{
    
    weak var viewController: CalculatorDisplayLogic?
    
    // MARK: CalculatorPresentationLogic
    
    func presentClickNumber(textCalculator: String) {
        viewController?.displayClickNumber(textCalculatorDisplay: textCalculator)
    }
    
    func presentClickOperations(textOperation: String) {
        viewController?.displayClickOperations(textOperationDisplay: textOperation)
    }
    
    
    func presentCalNumberForPlus(response: CalculatorModel.Plus.Response) {
        let viewModel = CalculatorModel.Plus.ViewModel(resultPlusNumber: "\(response.preCalResultNumber)")
        viewController?.displayCalNumberForPlus(viewModel: viewModel)
    }
    
    func presentCalNumberForMinus(response: CalculatorModel.Minus.Response) {
        let viewModel = CalculatorModel.Minus.ViewModel(resultMinusNumber: "\(response.preCalResultNumber)")
        viewController?.displayCalNumberForMinus(viewModel: viewModel)
    }
    
    func presentCalNumberForMultiply(response: CalculatorModel.Multiply.Response) {
        let viewModel = CalculatorModel.Multiply.ViewModel(resultMultiplyNumber: "\(response.preCalResultNumber)")
        viewController?.displayCalNumberForMultiply(viewModel: viewModel)
    }
    
    func presentCalNumberForDivide(response: CalculatorModel.Divide.Response) {
        let viewModel = CalculatorModel.Divide.ViewModel(resultDivideNumber: "\(response.preCalResultNumber)")
        viewController?.displayCalNumberForDivide(viewModel: viewModel)
    }
    
    func presentResultNumberEqual(response: CalculatorModel.Equal.Response) {
        let viewModel = CalculatorModel.Equal.ViewModel(resultNumber: "\(response.preCalResultNumber)")
        viewController?.displayResultNumberEqual(viewModel: viewModel)
    }
    
    func presentClearNumber() {
        viewController?.displayClearNumber()
    }
}
