//
//  CalculatorViewController.swift
//  MVVM_VS_VIP
//
//  Created by Papon Supamongkonchai on 7/4/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CalculatorDisplayLogic: AnyObject
{
    func displayClickNumber(textCalculatorDisplay: String)
    func displayClickOperations(textOperationDisplay: String)
    func displayCalNumberForPlus(viewModel: CalculatorModel.Plus.ViewModel)
    func displayCalNumberForMinus(viewModel: CalculatorModel.Minus.ViewModel)
    func displayCalNumberForMultiply(viewModel: CalculatorModel.Multiply.ViewModel)
    func displayCalNumberForDivide(viewModel: CalculatorModel.Divide.ViewModel)
    func displayResultNumberEqual(viewModel: CalculatorModel.Equal.ViewModel)
    func displayClearNumber()
}

class CalculatorViewController: UIViewController, CalculatorDisplayLogic
{
    // MARK: Property View
    @IBOutlet weak var lblTextInputCalculate: UILabel!
    @IBOutlet weak var lblTextDisplayPreCalResult: UILabel!
    
    // MARK: Property Control
    var interactor: CalculatorBusinessLogic?
    var router: (NSObjectProtocol & CalculatorRoutingLogic & CalculatorDataPassing)?
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CalculatorInteractor()
        let presenter = CalculatorPresenter()
        let router = CalculatorRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        interactor?.clearNumber()
        
    }
    
    // MARK: Do something
    
    func beginCalculate(number1 : Int, number2 : Int, typeCalculate: CalculatorModel.TypeOperations)
    {
        interactor?.inputNumber(number1: number1, number2: number2, typeCalculate: typeCalculate)
    }
    
    // MARK: CalculatorDisplayLogic
    
    func displayClickNumber(textCalculatorDisplay: String) {
        var textCurrentInputCalculate = self.lblTextInputCalculate.text ?? ""
        textCurrentInputCalculate += textCalculatorDisplay
        self.lblTextInputCalculate.text = textCurrentInputCalculate
    }
    
    func displayClickOperations(textOperationDisplay: String) {
        var textCurrentInputCalculate = self.lblTextInputCalculate.text ?? ""
        textCurrentInputCalculate += textOperationDisplay
        self.lblTextInputCalculate.text = textCurrentInputCalculate
    }
    
    func displayCalNumberForPlus(viewModel: CalculatorModel.Plus.ViewModel) {
        self.lblTextDisplayPreCalResult.text = viewModel.resultPlusNumber
    }
    
    func displayCalNumberForMinus(viewModel: CalculatorModel.Minus.ViewModel) {
        self.lblTextDisplayPreCalResult.text = viewModel.resultMinusNumber
    }
    
    func displayCalNumberForMultiply(viewModel: CalculatorModel.Multiply.ViewModel) {
        self.lblTextDisplayPreCalResult.text = viewModel.resultMultiplyNumber
    }
    
    func displayCalNumberForDivide(viewModel: CalculatorModel.Divide.ViewModel) {
        self.lblTextDisplayPreCalResult.text = viewModel.resultDivideNumber
    }
    
    func displayResultNumberEqual(viewModel: CalculatorModel.Equal.ViewModel) {
        self.lblTextInputCalculate.text = viewModel.resultNumber
        self.lblTextDisplayPreCalResult.text = ""
    }
    
    func displayClearNumber() {
        self.lblTextInputCalculate.text = ""
        self.lblTextDisplayPreCalResult.text = ""
    }
    
    // MARK: Button Action
    @IBAction func btn_number_0_click() {
        interactor?.clickNumber(btnNumber: 0)
    }
    
    @IBAction func btn_number_1_click() {
        interactor?.clickNumber(btnNumber: 1)
    }
    
    @IBAction func btn_number_2_click() {
        interactor?.clickNumber(btnNumber: 2)
    }
    
    @IBAction func btn_number_3_click() {
        interactor?.clickNumber(btnNumber: 3)
    }
    
    @IBAction func btn_number_4_click() {
        interactor?.clickNumber(btnNumber: 4)
    }
    
    @IBAction func btn_number_5_click() {
        interactor?.clickNumber(btnNumber: 5)
    }
    
    @IBAction func btn_number_6_click() {
        interactor?.clickNumber(btnNumber: 6)
    }
    
    @IBAction func btn_number_7_click() {
        interactor?.clickNumber(btnNumber: 7)
    }
    
    @IBAction func btn_number_8_click() {
        interactor?.clickNumber(btnNumber: 8)
    }
    
    @IBAction func btn_number_9_click() {
        interactor?.clickNumber(btnNumber: 9)
    }
    
    @IBAction func btn_plus_click() {
        interactor?.clickOperations(operationSelect: .plus)
    }
    
    @IBAction func btn_minus_click() {
        interactor?.clickOperations(operationSelect: .minus)
    }
    
    @IBAction func btn_multiply_click() {
        interactor?.clickOperations(operationSelect: .multiply)
    }
    
    @IBAction func btn_divide_click() {
        interactor?.clickOperations(operationSelect: .divide)
    }
    
    @IBAction func btn_equal_click() {
        interactor?.resultNumberEqual()
    }
    
    @IBAction func btn_clear_click() {
        interactor?.clearNumber()
    }
}
